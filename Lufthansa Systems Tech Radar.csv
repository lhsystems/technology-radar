name,ring,quadrant,isNew,description
Infrastructure as code,Adopt,Techniques,FALSE,"<p>DEMO Although <strong>infrastructure as code</strong> is a relatively old technique (we’ve featured it in the Radar in 2011), it has become vitally important in the modern cloud era where the act of setting up infrastructure has become the passing of configuration instructions to a cloud platform. When we say ""as code"" we mean that all the good practices we've learned in the software world should be applied to infrastructure. Using source control, adhering to the <a href=""https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"">DRY principle</a>, modularization, maintainability, and using automated testing and deployment are all critical practices. Those of us with a deep software and infrastructure background need to empathize with and support colleagues who do not. Saying ""treat infrastructure like code"" isn't enough; we need to ensure the hard-won learnings from the software world are also applied consistently throughout the infrastructure realm.</p>"
Micro frontends,Adopt,Techniques,FALSE,"<p><strong><a href=""https://micro-frontends.org/"">Micro-frontends</a></strong> extends the concepts of <strong><a href=""https://martinfowler.com/articles/microservices.html"">microservices</a></strong> to the frontend world. The idea is to think about a web app as a composition of features which are owned by independent teams. Each team has a distinct area of business or mission it cares about and specialises in. <strong><a href=""https://micro-frontends.org/"">Micro-frontends</a></strong> can be implemented using various web programming mechanisms like <strong><a href=""https://reactjs.org/"">React.js</a></strong>, <strong><a href=""https://angularjs.org/"">Angular.js</a></strong> or even a combination of these. We're confident this style will allow our organizations to decompose UI and enable parallel development across multiple teams.</p>"
Self-Contained Systems with microservices,Adopt,Techniques,FALSE,"<p>The <strong><a href=""https://scs-architecture.org/"">Self-Contained Systems</a></strong> (SCS) with <strong><a href=""https://martinfowler.com/articles/microservices.html"">microservices</a></strong> is an architecture style focussing on a separation of functionality into many independent systems, making the complete logical system a collaboration of many smaller software systems. This avoids the problem of large monoliths that grow constantly and eventually become unmaintainable. This architecture style combines the benefits of monolithic patterns as well as microservice patterns and keeps the potential complexity of a pure microservice architecture under control.</p>"
Consumer Driven Contracts,Trial,Techniques,FALSE,"<p><strong><a href=""https://www.martinfowler.com/articles/consumerDrivenContracts.html"">Consumer Driven Contracts</a></strong> are an essential part of a mature <strong><a href=""https://martinfowler.com/articles/microservices.html"">microservices</a></strong> testing portfolio, enabling independent service deployments. Frameworks like <strong><a href=""https://pact.io/"">pact</a></strong>, <strong><a href=""https://spring.io/projects/spring-cloud-contract"">spring-cloud-contract</a></strong> because they make proper contract tests easier to implement.</p>"
Client Side Load Balancing,Adopt,Techniques,FALSE,"<p><strong><a href=""https://medium.com/@mstykt/load-balancing-in-microservices-474ad84b847d"">Client Side Loadbalancing</a></strong> ensure fail-safety in production by reaching one of multiple instances of the same application where the caller (aka the client) handles the load balancing by using well established frameworks like <strong><a href=""https://spring.io/guides/gs/spring-cloud-loadbalancer/"">Spring Cloud LoadBalancer</a></strong>, <strong><a href=""https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-cloud-ribbon.html"">Spring Cloud Ribbon</a></strong>, <strong><a href=""https://spring.io/projects/spring-cloud-openfeign"">Spring Cloud OpenFeign</a></strong></p>"
Feature toggle,Adopt,Techniques,TRUE,"<p><strong><a href=""https://www.thoughtworks.com/radar/techniques/simplest-possible-feature-toggle"">Feature toggles</a></strong> are powerful technique to modify system behavior without changing code and allows going towards <a href=""https://martinfowler.com/articles/continuousIntegration.html"">Continuous Integration</a>. We recommend using frameworks like <a href=""https://unleash.github.io/"">Unleash</a> or <a href=""https://ff4j.org/"">FF4J</a>. Unless you need A/B testing or <a href=""https://martinfowler.com/bliki/CanaryRelease.html"">canary release</a> we encourage you to use the <strong>simplest possible feature toggle</strong> instead of unnecessarily complex feature toggle frameworks.</p>"
OpenTelemetry,Trial,Platforms,FALSE,"<p><strong><a href=""https://opentelemetry.io/"">OpenTelemetry</a></strong> is an open source observability project that merges <a href=""https://opentracing.io/"">OpenTracing</a> and <a href=""https://github.com/census-instrumentation"">OpenCensus</a>. The OpenTelemetry project includes <a href=""https://github.com/open-telemetry/opentelemetry-specification"">specification</a>, libraries, agents, and other components needed to capture telemetry from services to better observe, manage and debug them. It covers the three pillars of observability — distributed tracing, metrics and logging (currently in beta) — and its specification connects these three pieces through <a href=""https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/correlationcontext/api.md"">correlations</a>; thus you can use <em>metrics</em> to pinpoint a problem, locate the corresponding <em>traces</em> to discover where the problem occured, and ultimately study the corresponding <em>logs</em> to find the exact root cause. OpenTelemetry components can be connected to back-end observability systems such as <a href=""/radar/tools/prometheus"">Prometheus</a> and <a href=""/radar/tools/jaeger"">Jaeger</a> among <a href=""https://opentelemetry.io/registry/?s=exporter"">others</a>. Formation of OpenTracing is a positive step toward the convergence of standardization and the simplification of tooling.</p>"
Postgresql,Adopt,Platforms,FALSE,"<p><strong><a href=""https://www.postgresql.org/"">Postgresql</a></strong> is a powerful, open source object-relational database system with strong reputation for reliability, feature robustness, and performance.</p>"
Mariadb,Adopt,Platforms,FALSE,"<p><strong><a href=""https://www.postgresql.org/"">MariaDB</a></strong> is one of the most popular open source relational databases, made by the original developers of MySQL and guaranteed to stay open source. It is part of most cloud offerings and the default in most Linux distributions. It is built upon the values of performance, stability, and openness. Recent new functionality includes advanced clustering with Galera Cluster 4, compatibility features with Oracle Database and Temporal Data Tables, allowing one to query the data as it stood at any point in the past.</p>"
Oracle,Hold,Platforms,FALSE,"<p><strong><a href=""https://www.oracle.com/database/"">Oracle Database</a></strong> is a multi-model database management system produced and marketed by Oracle Corporation. It is a database commonly used for running online transaction processing (OLTP), data warehousing (DW) and mixed (OLTP & DW) database workloads. Oracle Database is available by several service providers on-prem, on-cloud, or as hybrid cloud installation.</p>"
Business intelligence (BI) platform,Adopt,Platforms,FALSE,"<p><strong><a href=""https://www.gartner.com/en/information-technology/glossary/bi-platforms"">BI Platforms</a></strong> enable us to build business intelligence applications by providing capabilities in three categories: analysis, such as online analytical processing (OLAP); information delivery, such as reports and dashboards; and platform integration, such as BI metadata management and a development environment. They also allow us to satisy cusotmer requirements towards self-service reporting. We recommend using platforms like <a href=""https://www.tableau.com/"">Tableau</a> or <a href=""https://powerbi.microsoft.com/en-us/what-is-power-bi/"">PowerBI</a></p>"
Open Policy Agent (OPA),Trial,Tools,FALSE,"<p><strong><a href=""https://www.openpolicyagent.org/"">Open Policy Agent (OPA)</a></strong> has rapidly become a favorable component of many distributed cloud-native solutions that we build for our clients. OPA provides a uniform framework and <a href=""https://www.openpolicyagent.org/docs/latest/#rego"">language</a> for declaring, enforcing and controlling policies for various components of a cloud-native solution. It's a great example of a tool that implements <a href=""/radar/techniques/security-policy-as-code"">security policy as code</a>. We've had a smooth experience using OPA in multiple scenarios, including deploying resources to K8s clusters, enforcing access control across services in a <a href=""/radar/techniques/service-mesh"">service mesh</a> and fine-grained security controls as code for accessing application resources. A recent commercial offering, <a href=""https://www.styra.com/"">Styra's Declarative Authorization Service (DAS)</a>, eases the adoption of OPA for enterprises by adding a management tool, or control plane, to OPA for K8s with a prebuilt policy library, impact analysis of the policies and logging capabilities. We look forward to maturity and extension of OPA beyond operational services to (big) data-centric solutions.</p>"
Java, Adopt,languages-and-frameworks,FALSE,"<p><strong><a href=""https://en.wikipedia.org/wiki/Java_(programming_language)"">Java</a></strong> is a class-based, object-oriented programming language that is designed to have as few implementation dependencies as possible. It is a general-purpose programming language intended to let application developers write once, run anywhere meaning that compiled Java code can run on all platforms that support Java without the need for recompilation.</p>"
.NET/C#, Adopt,languages-and-frameworks,FALSE,"<p><strong><a href=""https://dotnet.microsoft.com/learn/dotnet/what-is-dotnet"">.Net</a></strong> is a free, cross-platform, open source developer platform for building many different types of applications. With <strong><a href=""https://dotnet.microsoft.com/learn/dotnet/what-is-dotnet"">.Net</a></strong>, you can use multiple languages, editors, and libraries to build for web, mobile, desktop, games, and IoT. We envision to write <strong><a href=""https://dotnet.microsoft.com/learn/dotnet/what-is-dotnet"">.Net</a></strong> apps in <strong><a href=""https://en.wikipedia.org/wiki/C_Sharp_(programming_language)"">C#</a></strong> which is a simple, modern, object-oriented, and type-safe programming language.</p>"
JavaScript/TypeScript, Adopt,languages-and-frameworks,FALSE,"<p><strong><a href=""https://www.typescriptlang.org/"">Typescript</a></strong> is a modern age <strong><a href=""https://en.wikipedia.org/wiki/JavaScript"">Javascript</a></strong> development language. It is a statically compiled language to write clear and simple <strong><a href=""https://en.wikipedia.org/wiki/JavaScript"">Javascript</a></strong> code. It can be run on <strong><a href=""https://en.wikipedia.org/wiki/Node.js"">Node js</a></strong> or any browser which supports <strong><a href=""https://en.wikipedia.org/wiki/ECMAScript#Versions"">ECMAScript 3</a></strong> or newer versions.</p>"
GoLang,Adopt,languages-and-frameworks,FALSE,"<p><strong><a href=""https://golang.org/"">Golang</a></strong> is an open source programming language that makes it easy to build simple, reliable, and efficient software. Its concurrency mechanisms make it easy to write programs that get the most out of multicore and networked machines, while its novel type system enables flexible and modular program construction. Go compiles quickly to machine code yet has the convenience of garbage collection and the power of run-time reflection. It's a fast, statically typed, compiled language that feels like a dynamically typed, interpreted language.</p>"
React Hooks,Adopt,languages-and-frameworks,FALSE,"<p><strong><a href=""https://reactjs.org/docs/hooks-intro.html"">React Hooks</a></strong> have introduced a new approach to managing stateful logic; given React components have always been closer to functions than classes, Hooks have embraced this and brought state to the functions, instead of taking function as methods to the state with classes. Based on our experience, Hooks improve reuse of functionality among components and code readability. Given Hooks’ testability improvements, using <a href=""https://reactjs.org/docs/test-renderer.html"">React Test Renderer</a> and <a href=""/radar/languages-and-frameworks/react-testing-library"">React Testing Library</a>, and their growing community support, we consider them our approach of choice.</p>"
